<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="Controllers"/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--           设置视图的路径前缀和后缀，这样在controller中只需要指定视图的文件名就可以了-->
        <!--        框架在Controller中使用setViewName的时候直接写文件名即可-->
        <property name="prefix" value = "/WEB-INF/views/"/>
        <property name="suffix" value = ".jsp"/>
    </bean>
<!--当tomcat的default已经被某个处理器类所替换-->
<!--    处理静态资源方法一 ： 使用<mvc:default-servlet-handler> 标签-
原理： 框架会创建对象DefaultServletHttpRequestHandler （就是已经写好的一个controller）
该对象可以将接受的请求转发给Tomcat的default servlet
    但要注意 ：<mvc:default-servlet-handler>  与 @RequestMapping 注解有冲突 需要加入注解驱动
     annotation-driven 来解决-->
<!--    <mvc:default-servlet-handler />-->
<!--    <mvc:annotation-driven/>-->

<!--**************************************************************************************-->
<!--<!-    处理静态资源的第二种方式 比较常用-->
<!--        加入mvc:resources 标签以后，框架会创建ResourceHttpRequestHandler处理器对象-->
<!--        框架让这个对象来处理静态资源访问，不依赖tomcat服务器。对AJAX很好-->
<!--        mapping ： 指定静态资源的uri地址， 用通配符-->
<!--        location ： 静态资源在项目中的目录位置&ndash;&gt;-->

        <mvc:resources mapping="images/**" location="/images/"/>
<!--    这里的images/** 就表示 image 下面的所有文件，包括images下的多级目录里面的文件
        /images/  第一个/ 表示以webapp目录为根， 第二个 / 表示目录-->
        <mvc:resources mapping = "html/**" location = "/html/"/>
<!--    告诉中央调度器，满足地址的项都要访问静态文件-->
</beans>