<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!-- 声明，注册springmvc核心对象DispatcherServlet
    需要在tomcat服务器启动后创建DispatcherServlet对象的实例
    创建DispatcherServlet实例对象是因为在创建它的过程中会
    同时创建springmvc对象、读取springmvc配置文件的时候，把配置文件中的Controller对象都创建好，
    当用户发起请求的时候就可以直接用
    servlet初始化会执行init()方法。而DispatcherServlet对象在init()方法中被创建，同时他会读取配置文件
    init(){
        WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
        所以在创建的时候需要保证xml配置文件存在
        然后将容器对象放到ServletContext中。
        getServletContext().setArribute(key,ctx)
    }
-->
    <servlet>
        <servlet-name>springmvc1</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--        load-on-startup 标签标明在Tomcat启动时创建Servlet对象。
                其中数字标明创建的顺序，数值越小越优先被创建，一般大于等于0 -->
        <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:springmvc.xml</param-value>
        <!--            当配置文件存在以后再启动Tomcat就不会报错了-->
    </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc1</servlet-name>
<!--        url-pattern 可以使用两种方式
            1. 使用扩展名， 语法：  *.xxxx  其中xxxx是自定义的扩展名，常用的方式有 *.do *.action *.mvc 等等
                所有最后扩展名匹配的请求都会发到这个servlet对象中来
                http://localhost:8080/myweb/some.do
                2.使用斜杠 / -->

        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
<!--    如果直接启动，会报错说找不到ServletContext文件[/WEB-INF/springmvc1-servlet.xml]
        证明在创建过程中会读取springmvc1-servlet.xml。
        命名规则： mvc的名字-servlet.xml ； 默认位置在WEB-INF下
        但是默认的规则太死板，所以可以自定义springmvc读取配置文件的路径 <init-param>
    
-->
<!--    <servlet>-->
<!--        <servlet-name>springmvc2</servlet-name>-->
<!--        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>-->
<!--        &lt;!&ndash;        load-on-startup 标签标明在Tomcat启动时创建Servlet对象。-->
<!--                        其中数字标明创建的顺序，数值越小越优先被创建，一般大于等于0 &ndash;&gt;-->
<!--        <load-on-startup>2</load-on-startup>-->
<!--    </servlet>-->


</web-app>